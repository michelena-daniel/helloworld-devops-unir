pipeline {
    agent none
    options { skipDefaultCheckout() }

    stages {
        stage('Get Code') {
            agent { label 'agent-windows' }
            steps {
				bat 'whoami & hostname'
				echo WORKSPACE
                echo 'Me voy a traer el cÃ³digo'
                git url: 'https://github.com/michelena-daniel/helloworld-devops-unir.git', branch: 'feature_fix_coverage'
                bat 'dir'
                stash name: 'repo', includes: '**'
            }
        }
		
        stage('Parallel tests') {
            parallel {
                stage('Unit') {
                    agent { label 'agent-unit' }
                    steps {
                        unstash 'repo'
                        bat '''
                          whoami & hostname & echo %WORKSPACE%
                          python -m pip install -q coverage
                          SET PYTHONPATH=.
                          python -m coverage run --branch ^
                               --source=app ^
                               --omit=app\\__init__.py,app\\api.py ^
                               -m pytest --junitxml=result-unit.xml test\\unit
                          python -m coverage xml -o coverage.xml
                        '''
                        stash includes: 'coverage.xml', name: 'coverage'
                    }
                }
                stage('Static') {
                    agent { label 'agent-unit' }
                    steps {
                        unstash 'repo'
                        bat '''
                          whoami & hostname & echo %WORKSPACE%
                          python -m flake8 --format=pylint --exit-zero app >flake8.out
                        '''
                        recordIssues(
							tool: flake8(pattern: 'flake8.out'),
							qualityGates: [
								[threshold: 8,  type: 'TOTAL', unstable: true],
								[threshold: 10, type: 'TOTAL', unstable: false]
							]
						)
                    }
                }
                stage('Security Test') {
                    agent { label 'agent-unit' }
                    steps {
                        unstash 'repo'
                        bat '''
                          whoami & hostname & echo %WORKSPACE%
                          python -m bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}:0: [{test_id}] {msg}" 
                        '''
                        recordIssues(
							tool: pyLint(pattern: 'bandit.out'),
							qualityGates: [
								[threshold: 2, type: 'TOTAL', unstable: true],
								[threshold: 4, type: 'TOTAL', unstable: false]
							]
						)
                    }
                }
            }
        }
		
        stage('Rest') {
            agent { label 'agent-api' }
            steps {
                unstash 'repo'
                bat '''
                  whoami & hostname & echo %WORKSPACE%
                  set FLASK_APP=app\\api.py
                  set FLASK_ENV=development
                  start flask run
                  start java -jar C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock\\wiremock-standalone-4.0.0-beta.2.jar --port 9090 --root-dir C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock
                  SET PYTHONPATH=%WORKSPACE%
                  pytest --junitxml=result-rest.xml test\\rest
                '''
            }
        }
		
        stage('Coverage') {
            agent { label 'agent-unit' }
            steps {
                unstash 'coverage'
                bat 'whoami & hostname & echo %WORKSPACE%'
                recordCoverage(
                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                    qualityGates: [
                        [threshold: 85, metric: 'LINE',   baseline: 'PROJECT', criticality: 'FAILURE'],
                        [threshold: 95, metric: 'LINE',   baseline: 'PROJECT', criticality: 'UNSTABLE'],
                        [threshold: 80, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'FAILURE'],
                        [threshold: 90, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'UNSTABLE']
                    ]
                )
            }
        }
		
        stage('Performance') {
            agent { label 'agent-api' }
            steps {
                unstash 'repo'
                bat '''
                  whoami & hostname & echo %WORKSPACE%
                  "C:\\JMeter\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter.bat" ^
                        -n -t test\\jmeter\\flask.jmx ^
                        -l flask.jtl ^
                        -f
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
		
		stage('Cleanup') {
			parallel {
				stage('Win Cleanup') {
				  agent { label 'agent-windows' }
				  steps { cleanWs() }
				}
				stage('Unit Cleanup') {
				  agent { label 'agent-unit' }
				  steps { cleanWs() }
				}
				stage('Api Cleanup') {
				  agent { label 'agent-api' }
				  steps { cleanWs() }
				}
			}
		}
    }
}