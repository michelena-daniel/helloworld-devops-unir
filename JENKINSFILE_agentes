pipeline {
    agent any

    stages {
        stage('Get Code') {
	    agent { label 'agent-windows' }
            steps {
		bat 'whoami & hostname'
		echo WORKSPACE
                echo 'Clonamos repo'
                git url: 'https://github.com/michelena-daniel/helloworld-devops-unir.git'				
                bat 'dir'
                stash name: 'repo', includes: '**'
            }
        }

        stage('Build') {
	    agent { label 'agent-windows' }
            steps {
		bat 'whoami & hostname'
		echo WORKSPACE
                echo 'Compilacion mock'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
		    agent { label 'agent-unit' }
                    steps {
                        bat 'whoami & hostname'
			echo WORKSPACE
			unstash 'repo'
                        bat '''
                            SET PYTHONPATH=.
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
			stash name: 'unit-result', includes: 'result-unit.xml'
                    }
                }

                stage('Rest') {
		    agent { label 'agent-unit' }
                    steps {
                        bat 'whoami & hostname'
			echo WORKSPACE
			unstash 'repo'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''								
                                set FLASK_APP=app\\api.py
                                set FLASK_ENV=development
                                start flask run
                                start java -jar C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock\\wiremock-standalone-4.0.0-beta.2.jar --port 9090 --root-dir C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock
                                SET PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test\\rest
                            '''
                        }
			stash name: 'rest-result', includes: 'result-rest.xml'
                    }
                }
            }
        }
        stage('Results') {
	    agent { label 'principal' }
            steps(){
		unstash 'unit-result'
		unstash 'rest-result'				
		bat 'whoami & hostname'
		echo WORKSPACE
                junit 'result*.xml'
            }
        }
    }
	post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}
