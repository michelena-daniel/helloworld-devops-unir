pipeline {
    agent any

    stages {
        stage('Clone') {
            steps {
                git url: 'https://github.com/michelena-daniel/helloworld-devops-unir.git', branch: 'feature_fix_racecond'
                bat 'dir test\\wiremock && dir test\\wiremock\\mappings'
                bat 'dir'
            }
        }

        stage('Build') {
            steps {
                echo 'No compiling, we are running python.'
            }
        }
		
		stage('BootUpServices') {
			steps {
				catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
					echo 'Start CPU overload'
                    bat '''
                         for /l %%i in (1,1,%NUMBER_OF_PROCESSORS%) do start "" /B powershell -NoProfile -WindowStyle Hidden -Command "while($true){Get-Random | Out-Null}"
                    '''							
					sleep(time: 5, unit: 'SECONDS')
                    
					echo 'Boot up services'
                    bat '''
                        set FLASK_APP=app\\api.py
                        set FLASK_ENV=development
                        start "flask" /b flask run
                    '''
                    echo 'Mount wiremock container'
                    script {
                      bat 'docker rm -f wiremock || echo "Nothing to remove."'
                      def ws = env.WORKSPACE.replaceAll('\\\\','/')
                      bat """
                        docker run -d --rm -p 9090:8080 --name wiremock ^
                          -v "${ws}/test/wiremock:/home/wiremock" ^
                          wiremock/wiremock:3.13.0 ^
                          --root-dir /home/wiremock ^
                          --verbose
                      """
                    }
                    retry(10) {
                      bat 'curl -f http://localhost:9090/__admin/mappings || exit 1'
                      sleep time:1, unit:'SECONDS'
                    }
                    echo 'Wiremock loaded.'
					sleep(time: 5, unit: 'SECONDS')
				}
			}
		}

        stage('Tests') {
            parallel {
                stage('Unit') {
                    steps {
                        bat '''
                            SET PYTHONPATH=.
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                    }
                }

                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							bat '''
								SET PYTHONPATH=.
                                pytest --junitxml=result-rest.xml test\\rest
							'''
                        }
                    }
                }
            }
        }
        stage('Results') {
            steps(){
                junit 'result*.xml'
            }
        }
    }
    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
    }
}