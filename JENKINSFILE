pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                echo 'Me voy a traer el cÃ³digo'
                git url: 'https://github.com/michelena-daniel/helloworld-devops-unir.git'
                bat 'dir'
                echo WORKSPACE
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    steps {
                        bat '''
                            python -m pip install --quiet --disable-pip-version-check coverage
                            SET PYTHONPATH=.
                            python -m coverage run --branch ^
                               --source=app ^
                               --omit=app\\__init__.py,app\\api.py ^
                               -m pytest --junitxml=result-unit.xml test\\unit
                            python -m coverage xml -o coverage.xml
                        '''
                    }
                }

                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set FLASK_APP=app\\api.py
                                set FLASK_ENV=development
                                start flask run
                                start java -jar C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock\\wiremock-standalone-4.0.0-beta.2.jar --port 9090 --root-dir C:\\Users\\danie\\source\\repos\\EjerciciosUnir\\wiremock
                                SET PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test\\rest
                            '''
                        }
                    }
                }
            }
        }
        stage('Static') {
            steps() {
                bat '''
                    python -m flake8 --format=pylint --exit-zero app >flake8.out
                '''
                recordIssues(
                    tool: flake8(pattern: 'flake8.out'),
                    qualityGates: [
                        [threshold: 8,  type: 'TOTAL', unstable: true],
                        [threshold: 10, type: 'TOTAL', unstable: false]
                    ]
                )
            }
        }
        stage('Security Test') {
            steps() {
                bat '''
                    python -m bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}:0: [{test_id}] {msg}" 
                '''
                
                 recordIssues(
                    tool: pyLint(pattern: 'bandit.out'),
                    qualityGates: [
                        [threshold: 2, type: 'TOTAL', unstable: true],
                        [threshold: 4, type: 'TOTAL', unstable: false]
                    ]
                )
            }
        }
        stage('Coverage') {
            steps() {
               recordCoverage(
                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                    qualityGates: [
                        [threshold: 85, metric: 'LINE',   baseline: 'PROJECT', criticality: 'FAILURE'],
                        [threshold: 95, metric: 'LINE',   baseline: 'PROJECT', criticality: 'UNSTABLE'],
                        [threshold: 80, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'FAILURE'],
                        [threshold: 90, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'UNSTABLE']
                    ]
                )
            }
        }
        stage('Performance') {
            steps() {
                bat '''
                    "C:\\JMeter\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter.bat" ^
                        -n -t test\\jmeter\\flask.jmx ^
                        -l flask.jtl ^
                        -f
                '''
                
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }
}